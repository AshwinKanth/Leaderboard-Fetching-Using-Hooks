{"ast":null,"code":"var _jsxFileName = \"/home/nxtwave/react-hooks/sessions/making-api-call-with-hooks-part-2/src/components/Leaderboard/index.js\",\n    _s = $RefreshSig$();\n\n// import {useState, useEffect} from 'react'\n// import Loader from 'react-loader-spinner'\n// import {LeaderboardContainer, LoadingViewContainer} from './styledComponents'\n// const apiStatusConstants = {\n//   initial: 'INITIAL',\n//   inProgress: 'IN_PROGRESS',\n//   success: 'SUCCESS',\n//   failure: 'FAILURE',\n// }\n// const Leaderboard = () => {\n//   const [apiResponse, setApiResponse] = useState({\n//     status: apiStatusConstants.initial,\n//     data: null,\n//     errorMsg: null,\n//   })\n//   useEffect(() => {\n//     const getLeaderboardData = async () => {\n//       setApiResponse({\n//         status: apiStatusConstants.inProgress,\n//         data: null,\n//         errorMsg: null,\n//       })\n//       const url = 'https://apis.ccbp.in/leaderboard'\n//       const options = {\n//         method: 'GET',\n//         headers: {\n//           Authorization:\n//             'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU',\n//         },\n//       }\n//       const response = await fetch(url, options)\n//       const responseData = await response.json()\n//     }\n//     getLeaderboardData()\n//   }, [])\n//   const renderFailureView = () => {}\n//   const renderSuccessView = () => {}\n//   const renderLoadingView = () => (\n//     <LoadingViewContainer>\n//       <Loader type='ThreeDots' color='#ffffff' height='50' width='50' />\n//     </LoadingViewContainer>\n//   )\n//   const renderLeaderboard = () => {\n//     const {status} = apiResponse\n//     switch (status) {\n//       case apiStatusConstants.inProgress:\n//         return renderLoadingView()\n//       case apiStatusConstants.success:\n//         return renderSuccessView()\n//       case apiStatusConstants.failure:\n//         return renderFailureView()\n//       default:\n//         return null\n//     }\n//   }\n//   return <LeaderboardContainer>{renderLeaderboard()}</LeaderboardContainer>\n// }\n// export default Leaderboard\nimport Loader from 'react-loader-spinner';\nimport { useEffect, useState } from 'react';\nimport LeaderboardTable from '../LeaderboardTable';\nimport { LeaderboardContainer, LoadingViewContainer } from './styledComponents';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n  success: 'SUCCESS',\n  failure: 'FAILURE'\n};\n\nconst Leaderboard = () => {\n  _s();\n\n  // Your code goes here...\n  const [apiResponse, setApiResponse] = useState({\n    status: apiStatusConstants.initial,\n    data: null,\n    errorMsg: null\n  });\n  useEffect(() => {\n    const getLeaderBoardData = async () => {\n      setApiResponse({\n        status: apiStatusConstants.inProgress,\n        data: null,\n        errorMsg: null\n      });\n      const url = 'https://apis.ccbp.in/leaderboard';\n      const options = {\n        method: 'GET',\n        headers: {\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU'\n        }\n      };\n      const response = await fetch(url, options);\n      const responseData = await response.json();\n\n      if (response.ok === true) {\n        setApiResponse(prevApiResponse => ({ ...prevApiResponse,\n          status: apiStatusConstants.success,\n          data: responseData\n        }));\n      } else {\n        setApiResponse(prevApiResponse => ({ ...prevApiResponse,\n          status: apiStatusConstants.failure,\n          errorMsg: responseData.error_msg\n        }));\n      }\n    };\n\n    getLeaderBoardData();\n  }, []);\n\n  const renderLoadingView = () => /*#__PURE__*/_jsxDEV(LoadingViewContainer, {\n    children: /*#__PURE__*/_jsxDEV(Loader, {\n      type: \"ThreeDots\",\n      color: \"#ffffff\",\n      height: \"50\",\n      width: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n\n  const renderSuccessView = () => {\n    const {\n      data\n    } = apiResponse;\n    const formattedLeaderboardData = data.leaderboard_data.map(eachUser => ({\n      id: eachUser.id,\n      rank: eachUser.rank,\n      name: eachUser.name,\n      profileImgUrl: eachUser.profile_image_url,\n      score: eachUser.score,\n      language: eachUser.language,\n      timeSpent: eachUser.time_spent\n    }));\n    return /*#__PURE__*/_jsxDEV(LeaderboardTable, {\n      leaderboardData: formattedLeaderboardData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 12\n    }, this);\n  };\n\n  const renderFailureView = () => {\n    const {\n      errorMsg\n    } = apiResponse;\n  };\n\n  const renderLeaderboard = () => {\n    // Your code goes here...\n    const {\n      status\n    } = apiResponse;\n\n    switch (status) {\n      case apiStatusConstants.inProgress:\n        return renderLoadingView();\n\n      case apiStatusConstants.success:\n        return renderSuccessView();\n\n      case apiStatusConstants.failure:\n        return renderFailureView();\n\n      default:\n        return null;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(LeaderboardContainer, {\n    children: renderLeaderboard()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Leaderboard, \"LcejUL5Z8gTq0/4EosyqIhBfGKM=\");\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"names":["Loader","useEffect","useState","LeaderboardTable","LeaderboardContainer","LoadingViewContainer","apiStatusConstants","initial","inProgress","success","failure","Leaderboard","apiResponse","setApiResponse","status","data","errorMsg","getLeaderBoardData","url","options","method","headers","Authorization","response","fetch","responseData","json","ok","prevApiResponse","error_msg","renderLoadingView","renderSuccessView","formattedLeaderboardData","leaderboard_data","map","eachUser","id","rank","name","profileImgUrl","profile_image_url","score","language","timeSpent","time_spent","renderFailureView","renderLeaderboard"],"sources":["/home/nxtwave/react-hooks/sessions/making-api-call-with-hooks-part-2/src/components/Leaderboard/index.js"],"sourcesContent":["// import {useState, useEffect} from 'react'\n// import Loader from 'react-loader-spinner'\n\n// import {LeaderboardContainer, LoadingViewContainer} from './styledComponents'\n\n// const apiStatusConstants = {\n//   initial: 'INITIAL',\n//   inProgress: 'IN_PROGRESS',\n//   success: 'SUCCESS',\n//   failure: 'FAILURE',\n// }\n\n// const Leaderboard = () => {\n//   const [apiResponse, setApiResponse] = useState({\n//     status: apiStatusConstants.initial,\n//     data: null,\n//     errorMsg: null,\n//   })\n\n//   useEffect(() => {\n//     const getLeaderboardData = async () => {\n//       setApiResponse({\n//         status: apiStatusConstants.inProgress,\n//         data: null,\n//         errorMsg: null,\n//       })\n\n//       const url = 'https://apis.ccbp.in/leaderboard'\n//       const options = {\n//         method: 'GET',\n//         headers: {\n//           Authorization:\n//             'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU',\n//         },\n//       }\n//       const response = await fetch(url, options)\n//       const responseData = await response.json()\n//     }\n\n//     getLeaderboardData()\n//   }, [])\n\n//   const renderFailureView = () => {}\n\n//   const renderSuccessView = () => {}\n\n//   const renderLoadingView = () => (\n//     <LoadingViewContainer>\n//       <Loader type='ThreeDots' color='#ffffff' height='50' width='50' />\n//     </LoadingViewContainer>\n//   )\n\n//   const renderLeaderboard = () => {\n//     const {status} = apiResponse\n\n//     switch (status) {\n//       case apiStatusConstants.inProgress:\n//         return renderLoadingView()\n//       case apiStatusConstants.success:\n//         return renderSuccessView()\n//       case apiStatusConstants.failure:\n//         return renderFailureView()\n//       default:\n//         return null\n//     }\n//   }\n\n//   return <LeaderboardContainer>{renderLeaderboard()}</LeaderboardContainer>\n// }\n\n// export default Leaderboard\n\nimport Loader from 'react-loader-spinner'\nimport {useEffect, useState} from 'react'\nimport LeaderboardTable from '../LeaderboardTable'\n\nimport {LeaderboardContainer, LoadingViewContainer} from './styledComponents'\n\nconst apiStatusConstants = {\n  initial: 'INITIAL',\n  inProgress: 'IN_PROGRESS',\n  success: 'SUCCESS',\n  failure: 'FAILURE',\n}\n\nconst Leaderboard = () => {\n  // Your code goes here...\n\n  const [apiResponse, setApiResponse] = useState({\n    status: apiStatusConstants.initial,\n    data: null,\n    errorMsg: null,\n  })\n\n  useEffect(() => {\n    const getLeaderBoardData = async () => {\n      setApiResponse({\n        status: apiStatusConstants.inProgress,\n        data: null,\n        errorMsg: null,\n      })\n\n      const url = 'https://apis.ccbp.in/leaderboard'\n      const options = {\n        method: 'GET',\n        headers: {\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJhaHVsIiwicm9sZSI6IlBSSU1FX1VTRVIiLCJpYXQiOjE2MjMwNjU1MzJ9.D13s5wN3Oh59aa_qtXMo3Ec4wojOx0EZh8Xr5C5sRkU',\n        },\n      }\n\n      const response = await fetch(url, options)\n      const responseData = await response.json()\n\n      if (response.ok === true) {\n        setApiResponse(prevApiResponse => ({\n          ...prevApiResponse,\n          status: apiStatusConstants.success,\n          data: responseData,\n        }))\n      } else {\n        setApiResponse(prevApiResponse => ({\n          ...prevApiResponse,\n          status: apiStatusConstants.failure,\n          errorMsg: responseData.error_msg,\n        }))\n      }\n    }\n\n    getLeaderBoardData()\n  }, [])\n\n  const renderLoadingView = () => (\n    <LoadingViewContainer>\n      <Loader type='ThreeDots' color='#ffffff' height='50' width='50' />\n    </LoadingViewContainer>\n  )\n\n  const renderSuccessView = () => {\n    const {data} = apiResponse\n\n    const formattedLeaderboardData = data.leaderboard_data.map(eachUser => ({\n      id: eachUser.id,\n      rank: eachUser.rank,\n      name: eachUser.name,\n      profileImgUrl: eachUser.profile_image_url,\n      score: eachUser.score,\n      language: eachUser.language,\n      timeSpent: eachUser.time_spent,\n    }))\n\n    return <LeaderboardTable leaderboardData={formattedLeaderboardData} />\n  }\n\n  const renderFailureView = () => {\n    const {errorMsg} = apiResponse\n    \n  }\n\n  const renderLeaderboard = () => {\n    // Your code goes here...\n\n    const {status} = apiResponse\n\n    switch (status) {\n      case apiStatusConstants.inProgress:\n        return renderLoadingView()\n      case apiStatusConstants.success:\n        return renderSuccessView()\n      case apiStatusConstants.failure:\n        return renderFailureView()\n      default:\n        return null\n    }\n  }\n\n  return <LeaderboardContainer>{renderLeaderboard()}</LeaderboardContainer>\n}\n\nexport default Leaderboard\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}